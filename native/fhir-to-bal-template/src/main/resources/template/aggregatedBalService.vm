#set($sqBrackets=[])
// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by Ballerina.
// Developers are allowed to modify this file as per the requirement.

import ballerina/http;
#foreach($import in $aggregatedService.getImportsList())
import $import.toLowerCase();
#end

# Generic types to wrap all implemented profiles for each resource.
# Add required profile types here.
#foreach($entry in $aggregatedService.getServices().entrySet())
#set($service = $entry.getValue())
#set($resourceType = $entry.getKey())
public type $resourceType #**##foreach($profile in $service.getProfileList())$profile.getPackagePrefix():$profile.getName()#if($foreach.hasNext)|#end#end;
#end

# initialize source system endpoints here

#foreach($entry in $aggregatedService.getServices().entrySet())
#set($service = $entry.getValue())
#set($resourceType = $entry.getKey())

// ######################################################################################################################
// # $resourceType API                                                                                                          #
// ###################################################################################################################### 

service /fhir/$service.getFhirVersion()/$resourceType on new $servicePackageImportIdentifier:Listener(config = ${resourceType.toLowerCase()}ApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id]($basePackageImportIdentifier:FHIRContext fhirContext) returns $resourceType|$basePackageImportIdentifier:OperationOutcome|$basePackageImportIdentifier:FHIRError {
        return $basePackageImportIdentifier:createFHIRError("Not implemented", $basePackageImportIdentifier:ERROR, $basePackageImportIdentifier:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid]($basePackageImportIdentifier:FHIRContext fhirContext) returns $resourceType|$basePackageImportIdentifier:OperationOutcome|$basePackageImportIdentifier:FHIRError {
        return $basePackageImportIdentifier:createFHIRError("Not implemented", $basePackageImportIdentifier:ERROR, $basePackageImportIdentifier:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .($basePackageImportIdentifier:FHIRContext fhirContext) returns $basePackageImportIdentifier:Bundle|$basePackageImportIdentifier:OperationOutcome|$basePackageImportIdentifier:FHIRError {
        return $basePackageImportIdentifier:createFHIRError("Not implemented", $basePackageImportIdentifier:ERROR, $basePackageImportIdentifier:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .($basePackageImportIdentifier:FHIRContext fhirContext, $resourceType $resourceType.toLowerCase()) returns $resourceType|$basePackageImportIdentifier:OperationOutcome|$basePackageImportIdentifier:FHIRError {
        return $basePackageImportIdentifier:createFHIRError("Not implemented", $basePackageImportIdentifier:ERROR, $basePackageImportIdentifier:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id]($basePackageImportIdentifier:FHIRContext fhirContext, $resourceType $resourceType.toLowerCase()) returns $resourceType|$basePackageImportIdentifier:OperationOutcome|$basePackageImportIdentifier:FHIRError {
        return $basePackageImportIdentifier:createFHIRError("Not implemented", $basePackageImportIdentifier:ERROR, $basePackageImportIdentifier:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id]($basePackageImportIdentifier:FHIRContext fhirContext, json patch) returns $resourceType|$basePackageImportIdentifier:OperationOutcome|$basePackageImportIdentifier:FHIRError {
        return $basePackageImportIdentifier:createFHIRError("Not implemented", $basePackageImportIdentifier:ERROR, $basePackageImportIdentifier:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id]($basePackageImportIdentifier:FHIRContext fhirContext) returns $basePackageImportIdentifier:OperationOutcome|$basePackageImportIdentifier:FHIRError {
        return $basePackageImportIdentifier:createFHIRError("Not implemented", $basePackageImportIdentifier:ERROR, $basePackageImportIdentifier:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history($basePackageImportIdentifier:FHIRContext fhirContext) returns $basePackageImportIdentifier:Bundle|$basePackageImportIdentifier:OperationOutcome|$basePackageImportIdentifier:FHIRError {
        return $basePackageImportIdentifier:createFHIRError("Not implemented", $basePackageImportIdentifier:ERROR, $basePackageImportIdentifier:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history($basePackageImportIdentifier:FHIRContext fhirContext) returns $basePackageImportIdentifier:Bundle|$basePackageImportIdentifier:OperationOutcome|$basePackageImportIdentifier:FHIRError {
        return $basePackageImportIdentifier:createFHIRError("Not implemented", $basePackageImportIdentifier:ERROR, $basePackageImportIdentifier:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

#end
