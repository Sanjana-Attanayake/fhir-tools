// Copyright (c) ${licenseYear}, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

#foreach($import in $imports)
#if($import)
import $import.toString();
#end
#end
import ballerina/log;

const FHIR_IG = "$igName";

# Initializer for the module
# + return - returns error if error occurred
function init() returns ${importIdentifier}FHIRError? {
    // Anything to initialize should happen here here

    //update terminology processor
    // TODO: https://github.com/wso2-enterprise/open-healthcare/issues/1047
    ${importIdentifier}InMemoryTerminologyLoader terminologyLoader = new(FHIR_CODE_SYSTEMS, FHIR_VALUE_SETS);
    ${importIdentifier}Terminology terminology = check terminologyLoader.load();

    readonly & ${importIdentifier}IGInfoRecord baseIgRecord = {
        title: "$igTitle",
        name: "$igName",
        terminology: terminology,
        profiles: {
#foreach($profile in $profiles)
#if(!$profile.getResourceType().equals("Bundle"))
            "$profile.getProfile().trim()": {
                url: "$profile.getProfile()",
                resourceType: "$profile.getResourceType()",
                modelType: $util.resolveSpecialCharacters($profile.getResourceName())
            }#if($foreach.count!=$profiles.size()),$newline#end
#end
#end

        },
        #set($range = [0..$searchParameterMaps])
        #set($endIdx = $searchParameterMaps + 1)
searchParameters: [#foreach($iteration in $range)#set($map_index = $iteration+1)${igCode.toUpperCase()}_IG_SEARCH_PARAMS_${map_index}#if($foreach.count!=$endIdx), #end#end]
    };
    ${importIdentifier}FHIRImplementationGuide baseImplementationGuide = new(baseIgRecord);
    check fhirRegistry.addImplementationGuide(baseImplementationGuide);

    log:printDebug("FHIR R4 ${igCode} Module initialized.");
}

# This empty function is used to initialize the module by other modules/packages.
public isolated function initialize() {};
